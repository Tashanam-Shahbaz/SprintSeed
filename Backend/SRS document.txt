### **Software Requirements Specification (SRS)**
### **Task Management System**

---

### **1. INTRODUCTION**

#### **1.1 Purpose and Scope**
The purpose of this document is to provide a detailed specification for the Task Management System. This system is a web-based application designed to help individuals and teams create, assign, track, and manage tasks efficiently.

*   **Scope:** The initial version (v1.0) of the system will focus on core functionalities including user management, project creation, task management (CRUD operations), and a central dashboard for an at-a-glance overview.
*   **Out of Scope:** Advanced features such as Gantt charts, time tracking, budget management, and third-party application integrations (beyond placeholder APIs) are considered out of scope for the initial release but are planned for future versions.

#### **1.2 System Overview**
The Task Management System will be developed using the MERN stack (MongoDB, Express.js, React, Node.js). It will feature a single-page application (SPA) frontend built with React that communicates with a RESTful API backend powered by Node.js and Express.js. All data, including user profiles, projects, and tasks, will be stored in a NoSQL MongoDB database. The architecture is designed for real-time updates, scalability, and maintainability.

#### **1.3 Definitions and Acronyms**

| Term      | Definition                                           |
| :-------- | :--------------------------------------------------- |
| **SRS**   | Software Requirements Specification                  |
| **CRUD**  | Create, Read, Update, Delete                         |
| **MERN**  | MongoDB, Express.js, React, Node.js                  |
| **UI/UX** | User Interface / User Experience                     |
| **API**   | Application Programming Interface                    |
| **JWT**   | JSON Web Token                                       |
| **RBAC**  | Role-Based Access Control                            |
| **SSL/TLS** | Secure Sockets Layer / Transport Layer Security      |
| **NoSQL** | A non-relational database                            |

---

### **2. FRONTEND SPECIFICATIONS**

#### **2.1 UI Design Description**
The user interface will be clean, modern, and intuitive, prioritizing ease of use and clarity. The design will employ a minimalist aesthetic with a consistent color palette and typography to minimize cognitive load. Interactive elements will provide clear visual feedback to the user.

#### **2.2 Screen Layouts and User Flows**

*   **Login/Registration Page:**
    *   **Layout:** A centered form with fields for email and password. Links for "Sign Up" or "Log In" will toggle between the two forms.
    *   **Flow:** A new user registers. Upon success, they are redirected to the main dashboard. An existing user logs in and is directed to the dashboard.

*   **Dashboard (Main View):**
    *   **Layout:** A primary navigation bar on the left or top. The main content area will display a summary of "My Tasks" (tasks assigned to the logged-in user) and a list of "Projects" they are a member of.
    *   **Flow:** Users get a quick overview of their workload and can navigate to specific projects.

*   **Project View:**
    *   **Layout:** Displays the project title and description at the top. The main area is a Kanban-style board with columns for task statuses (e.g., "To Do," "In Progress," "Done"). Each task is represented as a card that can be dragged and dropped between columns. A button to "Add New Task" will be prominently displayed.
    *   **Flow:** User selects a project from the dashboard. They can view all tasks, update a task's status by dragging it, or click on a task card to see more details.

*   **Task Detail Modal:**
    *   **Layout:** An overlay modal showing the task title, full description, assignee, due date, priority, and status. It will include controls to edit or delete the task (based on user permissions).
    *   **Flow:** User clicks on a task card to open the modal. They can view details or make changes and save them.

#### **2.3 Responsive Design Requirements**
The application must be fully responsive and provide an optimal user experience on desktops, tablets, and mobile devices. A mobile-first design approach will be used, ensuring core functionality is accessible on smaller screens. Layouts will adapt fluidly to different screen sizes using flexible grids and media queries.

---

### **3. BACKEND ARCHITECTURE**

#### **3.1 API Specifications and Endpoints**
The backend will expose a RESTful API for all frontend communications. Authentication will be managed via JWTs sent in the Authorization header.

| Method | Endpoint                               | Description                                      |
| :----- | :------------------------------------- | :----------------------------------------------- |
| POST   | `/api/auth/register`                   | Register a new user.                             |
| POST   | `/api/auth/login`                      | Authenticate a user and return a JWT.            |
| GET    | `/api/projects`                        | Get all projects for the authenticated user.     |
| POST   | `/api/projects`                        | Create a new project.                            |
| GET    | `/api/projects/:id`                    | Get details of a specific project.               |
| PUT    | `/api/projects/:id`                    | Update a project's details.                      |
| DELETE | `/api/projects/:id`                    | Delete a project.                                |
| GET    | `/api/projects/:projectId/tasks`       | Get all tasks within a specific project.         |
| POST   | `/api/projects/:projectId/tasks`       | Create a new task within a project.              |
| PUT    | `/api/tasks/:taskId`                   | Update a task's details (status, assignee, etc.).|
| DELETE | `/api/tasks/:taskId`                   | Delete a task.                                   |

#### **3.2 Business Logic Implementation**
*   **User Authentication:** User registration will hash passwords using bcrypt. Login will validate credentials and issue a signed JWT with a limited expiry. Middleware will protect routes by verifying the JWT on incoming requests.
*   **Task Management Logic:**
    *   Task creation requires a valid `projectId`.
    *   Task status updates will be broadcast in real-time to all connected clients viewing that project (using WebSockets/Socket.io).
    *   Permissions for updating or deleting a task will be restricted to the task assignee, the project owner, or a user with a "Project Manager" role.
*   **Role-Based Access Control (RBAC):**
    *   **Team Member:** Can view projects/tasks and update tasks assigned to them.
    *   **Project Manager:** Can create/update/delete tasks within their projects and manage project members.
    *   **Admin:** Global access to manage all users and projects.

#### **3.3 Integration Points**
The system will be architected to support future integrations. Placeholder modules will be created for:
*   **Google Calendar:** An API endpoint (`/api/integrations/google/sync`) will be stubbed out to handle future OAuth 2.0 flow and sync task due dates to a user's Google Calendar.
*   **Slack:** A webhook handler will be designed to post notifications to a Slack channel when a task is created or its status changes.

---

### **4. DATABASE DESIGN**

#### **4.1 Database Tables (Collections) with Schema**
A NoSQL database (MongoDB) will be used. Data will be organized into the following collections:

*   **`users` Collection**
| Field | Data Type | Description |
| :--- | :--- | :--- |
| `_id` | ObjectId | Unique identifier for the user. |
| `name` | String | User's full name. |
| `email` | String | User's email address (unique). |
| `password` | String | Hashed user password. |
| `createdAt` | Timestamp | Date and time of registration. |

*   **`projects` Collection**
| Field | Data Type | Description |
| :--- | :--- | :--- |
| `_id` | ObjectId | Unique identifier for the project. |
| `name` | String | Name of the project. |
| `description` | String | Detailed description of the project. |
| `owner` | ObjectId | Reference to the `users` collection (_id of the creator). |
| `members` | Array of ObjectId | List of user IDs who are members of the project. |
| `createdAt` | Timestamp | Date and time of project creation. |

*   **`tasks` Collection**
| Field | Data Type | Description |
| :--- | :--- | :--- |
| `_id` | ObjectId | Unique identifier for the task. |
| `title` | String | The title of the task. |
| `description` | String | A detailed description of the task. |
| `status` | String | Current status ('To Do', 'In Progress', 'Done'). |
| `priority` | String | Priority level ('Low', 'Medium', 'High'). |
| `projectId` | ObjectId | Reference to the `projects` collection. |
| `assignee` | ObjectId | Reference to the `users` collection (_id of the assigned user). |
| `dueDate` | Date | The deadline for the task. |
| `createdAt` | Timestamp | Date and time of task creation. |

#### **4.2 Data Flow Diagrams**
*   **User Registration:** User submits registration form -> Frontend sends POST to `/api/auth/register` -> Backend validates data, hashes password -> Backend creates a new document in the `users` collection -> Backend returns success message.
*   **Task Creation:** User clicks "Add Task" in a project -> Frontend sends POST to `/api/projects/:projectId/tasks` with task data -> Backend middleware verifies user has permission for that project -> Backend creates a new document in the `tasks` collection with a reference to the `projectId` -> Backend returns the new task object to the frontend.

#### **4.3 Data Migration Strategy**
As this is a new system, no initial data migration is required. For future schema changes, versioned migration scripts will be developed to update the database structure and/or data programmatically, ensuring no data loss.

---

### **5. NON-FUNCTIONAL REQUIREMENTS**

#### **5.1 Performance Metrics**
*   **API Response Time:** 95% of all API calls should complete in under 200ms.
*   **Page Load Time:** The initial application load (Dashboard) should be fully interactive in under 2 seconds on a standard broadband connection.
*   **Real-time Synchronization:** Task status changes should be reflected across all active clients viewing the same project within 500ms.

#### **5.2 Security Requirements**
*   **Data in Transit:** All communication between the client and server must be encrypted using SSL/TLS (HTTPS).
*   **Data at Rest:** All sensitive user data, particularly passwords, must be hashed. Database-level encryption will be enabled for the entire dataset.
*   **Authentication & Authorization:** Access will be controlled by JWT-based authentication and a robust RBAC system.
*   **Input Validation:** All data submitted by users must be sanitized on the backend to prevent common vulnerabilities like Cross-Site Scripting (XSS) and NoSQL injection.

#### **5.3 Scalability Considerations**
*   **Stateless Backend:** The Node.js backend will be designed to be stateless, allowing for horizontal scaling by running multiple instances behind a load balancer.
*   **Database Scaling:** MongoDB will be configured in a replica set for high availability and can be sharded in the future to distribute the data load across multiple servers as the user base grows.

---

### **6. IMPLEMENTATION TIMELINE**

The project is estimated to take **14 weeks** from start to deployment.

| Phase | Description | Duration | Key Milestones |
| :---- | :---------- | :------- | :------------- |
| **1** | **Project Setup & Backend Foundation** | **4 Weeks** | - Project repositories (Git) and CI/CD pipeline setup.<br>- Database schema finalized and implemented.<br>- User authentication (register/login) and authorization (RBAC) APIs complete. |
| **2** | **Core Feature Development** | **6 Weeks** | - CRUD APIs for Projects and Tasks complete.<br>- Frontend development for all screens (Dashboard, Project View, etc.).<br>- Frontend connected to all backend APIs.<br>- Real-time updates via WebSockets implemented. |
| **3** | **Testing & Refinement** | **3 Weeks** | - Unit, integration, and end-to-end (E2E) testing cycles.<br>- Bug fixing and performance optimization.<br>- UI/UX refinement based on internal feedback. |
| **4** | **Deployment & Launch** | **1 Week** | - Final E2E testing on a staging environment.<br>- Production environment setup and configuration.<br>- Deployment to production server.<br>- Go-live. |

#### **Dependencies and Critical Path**
*   **Dependencies:** Phase 2 is dependent on the completion of the backend foundation in Phase 1. Phase 3 is dependent on the completion of all core features in Phase 2.
*   **Resource Allocation:**
    *   1 Project Manager
    *   1 Backend Developer (Node.js)
    *   1 Frontend Developer (React)
    *   1 QA Engineer
*   **Critical Path:** The critical path follows the sequential development and testing of the core application logic: **Backend Foundation -> Core Feature API Development -> Frontend Integration -> End-to-End Testing -> Deployment**. A delay in any of these stages will directly impact the final delivery date.